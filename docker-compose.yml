services:
  frontend:
    user: 1000:1000
    image: oven/bun:latest
    container_name: frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
    working_dir: /app
    expose:
      - ${FRONTEND_PORT}
    environment:
      # Server
      FRONTEND_PORT: ${FRONTEND_PORT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      BACKEND_URL: ${BACKEND_URL}
      NEXT_PUBLIC_BACKEND_URL: ${PUBLIC_BACKEND_URL}
      NEXT_PUBLIC_CDN_URL: ${PUBLIC_CDN_URL}
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOST}`)
      - traefik.http.services.frontend.loadbalancer.server.port=${FRONTEND_PORT}
    command: sh -c "bun i && bun dev"

  backend:
    user: 1000:1000
    image: oven/bun:latest
    container_name: backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
    working_dir: /app
    expose:
      - ${BACKEND_PORT}
    environment:
      # Mongo
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASS}
      MONGO_DB: ${MONGO_DB}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}

      # Server
      BACKEND_PORT: ${BACKEND_PORT}
      CORS_ORIGIN: ${CORS_ORIGIN}

      # JWT
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      ACCESS_TOKEN_EXPIRATION: ${ACCESS_TOKEN_EXPIRATION}
      REFRESH_TOKEN_EXPIRATION: ${REFRESH_TOKEN_EXPIRATION}

      # S3
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_REGION: ${S3_REGION}
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${BACKEND_HOST}`)
      - traefik.http.services.backend.loadbalancer.server.port=${BACKEND_PORT}
    command: sh -c "bun i && bun start"

  mongo:
    user: 1000:1000
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    volumes:
      - ./mongo/data:/data/db
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    expose:
      - 27017
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASS}
      MONGO_DB: ${MONGO_DB}

  minio:
    user: 1000:1000
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    volumes:
      - ./minio/data:/data
    expose:
      - ${MINIO_PORT}
      - ${MINIO_CONSOLE_PORT}
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio.rule=Host(`${S3_PUBLIC_HOST}`)
      - traefik.http.routers.minio.service=minio
      - traefik.http.services.minio.loadbalancer.server.port=${MINIO_PORT}

      - traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_HOST}`)
      - traefik.http.routers.minio-console.service=minio-console
      - traefik.http.services.minio-console.loadbalancer.server.port=${MINIO_CONSOLE_PORT}
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}" --address ":${MINIO_PORT}"

  minio-console:
    image: minio/mc:latest
    container_name: minio-console
    restart: on-failure
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:${MINIO_PORT} ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      while ! mc ls minio/${S3_BUCKET}; do
        mc mb minio/${S3_BUCKET};
        sleep 1;
      done;
      mc anonymous set download minio/${S3_BUCKET};
      "

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --accesslog=true
      # Remove to enable HTTPS
      # - --entrypoints.web.http.redirections.entryPoint.to=websecure
      # - --entrypoints.web.http.redirections.entryPoint.scheme=https
      # - --entrypoints.websecure.address=:443
      # - --entrypoints.websecure.http.tls=true
      # - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      # - --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
    ports:
      - 80:80
      # Remove to enable HTTPS
      # - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/letsencrypt:/letsencrypt
